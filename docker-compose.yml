version: '3.8'

services:

  admin_site:
    build: backend/
    expose:
      - "8000"
    volumes:
      - static_backend:/opt/app/static/
      - media:/opt/app/media/
    env_file:
      - .env
    command: uwsgi --strict --ini uwsgi.ini

  api_receiver:
    build:
      context: worker_v2/api_receive
      dockerfile: Dockerfile
    volumes:
      - ./results:/tmp
      - media:/opt/app/media/:ro
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    
  html_to_pdf:
    build:
      context: worker_v2/html_to_pdf
      dockerfile: Dockerfile
    volumes:
      - ./results:/tmp
      - media:/opt/app/media/:ro
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
  

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs:/etc/nginx/conf.d:ro
      - static_backend:/var/www/backend/:ro
      - media:/var/www/media/:ro
      - frontend:/var/www/frontend/:ro
    depends_on:
      - admin_site
    ports:
      - "80:80"
  
  postgres:
    image: postgres:14.6-alpine3.17
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/:/docker-entrypoint-initdb.d/
    env_file:
      - .env

  rabbitmq:
    image: rabbitmq:3.11.7-management-alpine
    restart: always
    env_file:
      - .env
    healthcheck:
        test: ["CMD", "nc", "-z", "localhost", "5672" ]
        interval: 10s
        timeout: 10s
        retries: 5
  
  frontend:
    build:
      context: ./frontend
    tty: true
    volumes:
      - frontend:/app/build/static
    command: npm run start
    env_file:
      - .env

  redis:
    image: redis:7.0.8-alpine
    restart: always
    

volumes:
  media:
  postgres_data:
  static_frontend:
  static_backend:
  frontend:

networks: 
  default:
    name: voucher_app_net

